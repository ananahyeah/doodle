package com.ppi.utility.importer;

import com.ppi.utility.importer.service.FileProcessorService; // Import the new service class
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.springframework.beans.factory.annotation.Autowired; // For dependency injection
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException; // Import IOException for try-catch

/**
 * Controller for the main application view (main-view.fxml).
 * This class handles UI interactions, such as file uploading.
 * It's annotated with @Component to be managed by Spring.
 */
@Component
public class MainController {

    // FXML elements injected by FXMLLoader
    @FXML
    private Label messageLabel; // Label to display messages to the user

    // The primary stage, will be set by the main application class after FXML loading
    private Stage primaryStage;

    // Inject the FileProcessorService here
    private final FileProcessorService fileProcessorService;

    /**
     * Constructor for MainController. Spring will automatically inject FileProcessorService
     * because it's marked with @Service and this constructor is @Autowired.
     * @param fileProcessorService The service responsible for file reading and processing.
     */
    @Autowired // Marks this constructor for Spring's dependency injection
    public MainController(FileProcessorService fileProcessorService) {
        this.fileProcessorService = fileProcessorService;
    }

    /**
     * Initializes the controller. This method is automatically called by FXMLLoader
     * after the FXML file has been loaded and all @FXML annotated fields are injected.
     * It's a good place for initial setup of UI elements.
     */
    @FXML
    public void initialize() {
        // Initial message to the user, hidden until an action is performed.
        messageLabel.setText("");
        messageLabel.setVisible(false);
    }

    /**
     * Setter for the primary stage. This method will be called by the PpiExcelImporterApplication
     * after the MainController has been instantiated and the FXML loaded.
     * @param primaryStage The primary stage of the JavaFX application.
     */
    public void setPrimaryStage(Stage primaryStage) {
        this.primaryStage = primaryStage;
    }

    /**
     * Handles the "Upload File" button click event.
     * This method is automatically called when the button (fx:id="uploadButton") is clicked.
     */
    @FXML
    protected void onUploadButtonClick() {
        // Ensure primaryStage is set before using it
        if (primaryStage == null) {
            System.err.println("Error: Primary Stage is not set in MainController.");
            messageLabel.setText("Application error: Stage not ready.");
            messageLabel.setStyle("-fx-text-fill: red;");
            messageLabel.setVisible(true);
            return;
        }

        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Excel or CSV File");

        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Excel Files", "*.xlsx", "*.xls"),
                new FileChooser.ExtensionFilter("CSV Files", "*.csv"),
                new FileChooser.ExtensionFilter("All Files", "*.*")
        );

        File selectedFile = fileChooser.showOpenDialog(primaryStage);

        if (selectedFile != null) {
            String fileName = selectedFile.getName();
            messageLabel.setText("File '" + fileName + "' selected. Processing...");
            messageLabel.setStyle("-fx-text-fill: blue;"); // Indicate processing status
            messageLabel.setVisible(true);

            try {
                // Call the service to process the file and print to console
                fileProcessorService.processFile(selectedFile);
                messageLabel.setText("File '" + fileName + "' processed and content printed to console successfully!");
                messageLabel.setStyle("-fx-text-fill: green;"); // Success message
            } catch (IOException e) {
                messageLabel.setText("Error reading file: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
                System.err.println("I/O Error processing file " + fileName + ": " + e.getMessage());
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                messageLabel.setText("Unsupported file format: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
                System.err.println("Invalid argument during file processing for " + fileName + ": " + e.getMessage());
                e.printStackTrace();
            } catch (Exception e) { // Catch any other unexpected exceptions
                messageLabel.setText("An unexpected error occurred: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
                System.err.println("Unexpected error during file processing for " + fileName + ": " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            messageLabel.setText("File upload cancelled or no file selected.");
            messageLabel.setStyle("-fx-text-fill: red;");
            messageLabel.setVisible(true);
        }
    }
}
